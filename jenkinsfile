def ecr_repository_url
def ecs_cluster_arn
def ecs_service_name

pipeline {
  agent none

  environment {
    AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    ecr_password = credentials('ecr_password')
    ecr_username = credentials('ecr_username')
  }

  stages {
    stage('Prepare Infrastructure') {
      agent { 
        label 'terraform'
      }
      steps {
        dir("terraform") {
          sh 'pwd'
          sh 'terraform init'
          sh 'terraform apply -auto-approve'
          sh "terraform output ecr_repository_url | tr -d '" + '"' + "' > ecr_repository_url.txt"
          sh "terraform output ecs_cluster_arn | tr -d '" + '"' + "' > ecs_cluster_arn.txt"
          sh "terraform output ecs_service_name | tr -d '" + '"' + "' > ecs_service_name.txt"
          script {
            ecr_repository_url = readFile('ecr_repository_url.txt').trim()
            ecs_cluster_arn = readFile('ecs_cluster_arn.txt').trim()
            ecs_service_name = readFile('ecs_service_name.txt').trim()
          }
          sh 'rm -rf ecr_*.txt'
        }
      }
    }

    stage('Build Image') {
      agent { 
        label 'docker'
      }
      steps {
        sh "docker login --username ${ecr_username} --password ${ecr_password} ${ecr_repository_url}"
        sh "docker build -t ${ecr_repository_url}/pokedex-repository . --no-cache"
        sh "docker tag ${ecr_repository_url}/pokedex-repository:latest ${ecr_repository_url}/pokedex-repository:0.0.${BUILD_NUMBER}"
        sh "docker push ${ecr_repository_url}/pokedex-repository:latest"
        sh 'docker logout'
        sh 'docker system prune -a'
      }
    }

    stage('Deploy') {
      agent { 
        label 'awscli'
      }
      steps {
        sh "aws ecs update-service --cluster ${ecs_cluster_arn} --service ${ecs_service_name} --force-new-deployment --region us-east-1"
      }
    }
  }
}