def ecr_repository_url

pipeline {
  agent none

  environment {
    AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    TF_IN_AUTOMATION      = '1'
  }

  stages {
    stage('Prepare Image Registry') {
      agent { 
        label 'terraform'
      }
      steps {
        dir("terraform") {
          sh 'terraform init -input=false'
          sh 'terraform apply -target module.ecr -input=false -auto-approve -no-color'
          ecr_repository_url = sh (script: "terraform output ecr_repository_url | tr -d '" + '"' + "'", returnStdout: true)
        }
      }
    }

    stage('Build Image') {
      agent {
        label 'docker && awscli'
      }
      environment {
        GIT_COMMIT_HASH = sh (script: "git log -n 1 --pretty=format:'%H'", returnStdout: true)
      }
      steps {
        sh "aws ecr get-login-password | docker login --username AWS --password-stdin ${ecr_repository_url}"
        sh "docker build -t ${ecr_repository_url} . --no-cache"
        sh "docker tag ${ecr_repository_url}:latest ${ecr_repository_url}:${GIT_COMMIT_HASH}"
        sh "docker push ${ecr_repository_url}:latest"
        sh "docker push ${ecr_repository_url}:${GIT_COMMIT_HASH}"
        sh 'docker logout'
        sh 'docker image prune -a'
      }
    }

    stage('Deploy') {
      agent { 
        label 'terraform'
      }
      environment {
        GIT_COMMIT_HASH = sh (script: "git log -n 1 --pretty=format:'%H'", returnStdout: true)
      }
      steps {
        dir("terraform") {
          sh "pwd"
          sh "terraform init -input=false"
          sh "terraform apply -input=false -var='image_tag=${GIT_COMMIT_HASH}' -auto-approve -no-color"
          sh "terraform output"
        }
      }
    }
  }
}